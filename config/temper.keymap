/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define DEFAULT 0
#define QWERTY 1
#define NUM 2
#define NAV 3
#define FUN 4

/ {
    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        super_bspc: super_backspace {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp LA(BACKSPACE)>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        smart_shft: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LSHFT>, <&caps_word>;

            mods = <(MOD_LSFT)>;
        };

        comma_semi: comma_semi {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT)>;
        };

        dot_colon: dot_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT)>;
        };

        qmrk_excl: qmrk_excl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;

            mods = <(MOD_LSFT)>;
        };

        slh_morph: slh_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp FSLH>, <&kp BSLH>;

            mods = <(MOD_LSFT)>;
        };

        amps_morph: amps_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp AMPS>, <&kp PIPE>;

            mods = <(MOD_LSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        a {
            bindings = <&kp ESCAPE>;
            key-positions = <1 0>;
        };

        b {
            bindings = <&kp CAPS>;
            key-positions = <11 10>;
        };

        c {
            bindings = <&kp TAB>;
            key-positions = <21 20>;
        };

        d {
            bindings = <&kp BACKSPACE>;
            key-positions = <9 8>;
        };

        e {
            bindings = <&kp ENTER>;
            key-positions = <18 19>;
        };

        f {
            bindings = <&kp MINUS>;
            key-positions = <16 17>;
        };

        g {
            bindings = <&kp EQUAL>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        qwert {
            bindings = <
  &kp Q  &kp W  &kp E      &kp R        &kp T        &kp Y      &kp U            &kp I      &kp O    &kp P
  &kp A  &kp S  &kp D      &kp F        &kp G        &kp H      &kp J            &kp K      &kp L    &kp SEMI
  &kp Z  &kp X  &kp C      &kp V        &kp B        &kp N      &kp M            &kp COMMA  &kp DOT  &kp FSLH
                &lt 3 TAB  &lt 2 MINUS  &kp SPACE    &kp ENTER  &lt 1 BACKSPACE  &kp ESC
            >;
        };

        num {
            bindings = <
  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5    &kp N6  &kp N7  &kp N8  &kp N9  &kp N0
  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none
  &none   &none   &none   &none   &none     &none   &none   &none   &none   &none
                  &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        bt {
            bindings = <
  &kp LS(N1)    &kp LS(N2)    &kp LS(N3)    &kp LS(N4)    &kp LS(N5)     &kp LS(N6)  &kp LS(N7)  &kp LS(N8)  &kp LS(N9)  &kp LS(N0)
  &none         &kp LEFT      &kp DEL       &kp RIGHT     &bt BT_CLR     &none       &none       &none       &none       &none
  &bt BT_SEL 3  &bt BT_SEL 2  &bt BT_SEL 1  &bt BT_SEL 0  &bootloader    &none       &none       &none       &none       &none
                              &trans        &trans        &trans         &trans      &trans      &trans
            >;
        };

        arrow {
            bindings = <
  &trans          &kp UP_ARROW    &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans          &trans          &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans
                                  &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };
    };
};
